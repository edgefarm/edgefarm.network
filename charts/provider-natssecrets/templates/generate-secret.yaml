{{- if .Values.vault.credentials.secretRef.data }}
{{- if and .Values.vault.credentials.secretRef.data.token.value .Values.vault.credentials.secretRef.data.token.fromSecret }}
  {{- required "Both .vault.credentials.secretRef.data.token.value and vault.credentials.secretRef.data.token.fromSecret cannot be enabled at the same time" "" }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.namespace }}
  labels: {{- include "provider-natssecrets.labels" . | nindent 4 }}
data:
  generate-secret.sh: |
    #!/bin/sh
    # Don't abort on error. This is needed to continue the while loop for checking 
    # if a secret exists
    set +e

    data_address="{{ .Values.vault.credentials.secretRef.data.address }}"
    data_tls="{{ .Values.vault.credentials.secretRef.data.tls }}"
    data_insecure="{{ .Values.vault.credentials.secretRef.data.insecure }}"
    token_value="{{ .Values.vault.credentials.secretRef.data.token.value }}"
    token_fromSecret="{{ .Values.vault.credentials.secretRef.data.token.fromSecret }}"

    # Perform the same checks as in the "secretContent" template
    if [ -z "$data_address" ] || [ -z "$data_tls" ] || [ -z "$data_insecure" ]; then
        echo "data.address, data.tls, and data.insecure are required"
        exit 1
    fi

    if [ -n "$token_value" ] && [ -n "$token_fromSecret" ]; then
        echo "Both data.token.value and data.token.fromSecret cannot be set at the same time"
        exit 1
    elif [ -n "$token_value" ]; then
        token="$token_value"
    elif [ -n "$token_fromSecret" ]; then
        {{- with .Values.vault.credentials.secretRef.data.token.fromSecret }}
        token_secret_name="{{ .name }}"
        token_secret_namespace="{{ .namespace }}"
        token_secret_key="{{ .key }}"
        {{- end }}

        if [ -z "$token_secret_name" ] || [ -z "$token_secret_namespace" ] || [ -z "$token_secret_key" ]; then
            echo "data.token.fromSecret.name, data.token.fromSecret.namespace, and data.token.fromSecret.key must be set"
            exit 1
        fi
        # wait for the secret to be created
        while true; do
            secret_data=$(kubectl get secret "$token_secret_name" -n "$token_secret_namespace" -o jsonpath='{.data}' 2> /dev/null)
            if [ $? -eq 0 ] && [ -n "$(echo "$secret_data" | grep -o "$token_secret_key")" ]; then
                break
            else
                echo "$(date): waiting for secret key $token_secret_key in secret $token_secret_name/$token_secret_namespace to be created..."
                sleep 1
            fi
        done

        token_secret=$(kubectl get secret "$token_secret_name" -o jsonpath="{.data['$token_secret_key']}" --namespace "$token_secret_namespace")
        if [ -z "$token_secret" ]; then
            echo "The specified secret and key must exist"
            exit 1
        fi
        token=$(echo "$token_secret" | base64 --decode)
    else
        echo "Either data.token.value or data.token.fromSecret must be set"
        exit 1
    fi

    SECRET_CONTENT=$(cat <<EOF
    {
      "address": "$data_address",
      "tls": $data_tls,
      "insecure": $data_insecure,
      "token": "$token",
      "path": "nats-secrets"
    }
    EOF
    )

    # Create the secret with the generated content
    kubectl create secret generic $SECRET_NAME \
    --namespace=$SECRET_NAMESPACE \
    --from-literal=$SECRET_KEY="$SECRET_CONTENT"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.namespace }}
  labels: {{- include "provider-natssecrets.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      labels: {{- include "provider-natssecrets.labels" . | nindent 8 }}
    spec:
      serviceAccountName: generate-provider-natssecrets-secret
      serviceAccount: generate-provider-natssecrets-secret
      restartPolicy: OnFailure
      containers:
        - name: generate-secret
          image: bitnami/kubectl:latest
          command: ["/bin/sh", "/scripts/generate-secret.sh"]
          env:
            - name: SECRET_NAME
              value: {{ .Values.vault.credentials.secretRef.name }}
            - name: SECRET_NAMESPACE
              value: {{ .Values.namespace }}
            - name: SECRET_KEY
              value: {{ .Values.vault.credentials.secretRef.key }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: generate-provider-natssecrets-secret
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "provider-natssecrets.labels" . | nindent 4 }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "provider-natssecrets.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "update"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "provider-natssecrets.labels" . | nindent 4 }}
roleRef:
  kind: Role
  name: generate-provider-natssecrets-secret
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: generate-provider-natssecrets-secret
    namespace: {{ .Values.namespace }}
{{- end }}    

{{- if .Values.vault.credentials.secretRef.data.token.fromSecret }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.vault.credentials.secretRef.data.token.fromSecret.namespace }}
  labels:
    {{- include "provider-natssecrets.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: generate-provider-natssecrets-secret
  namespace: {{ .Values.vault.credentials.secretRef.data.token.fromSecret.namespace }}
  labels:
    {{- include "provider-natssecrets.labels" . | nindent 4 }}
roleRef:
  kind: Role
  name: generate-provider-natssecrets-secret
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: generate-provider-natssecrets-secret
    namespace: {{ .Values.namespace }}
{{- end }}    